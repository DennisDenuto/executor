// Code generated by counterfeiter. DO NOT EDIT.
package containerstorefakes

import (
	"sync"

	"code.cloudfoundry.org/executor"
	"code.cloudfoundry.org/executor/depot/containerstore"
	"code.cloudfoundry.org/lager"
)

type FakeProxyManager struct {
	RunnerStub        func(lager.Logger, executor.Container, <-chan struct{}) (containerstore.ProxyRunner, error)
	runnerMutex       sync.RWMutex
	runnerArgsForCall []struct {
		arg1 lager.Logger
		arg2 executor.Container
		arg3 <-chan struct{}
	}
	runnerReturns struct {
		result1 containerstore.ProxyRunner
		result2 error
	}
	runnerReturnsOnCall map[int]struct {
		result1 containerstore.ProxyRunner
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProxyManager) Runner(arg1 lager.Logger, arg2 executor.Container, arg3 <-chan struct{}) (containerstore.ProxyRunner, error) {
	fake.runnerMutex.Lock()
	ret, specificReturn := fake.runnerReturnsOnCall[len(fake.runnerArgsForCall)]
	fake.runnerArgsForCall = append(fake.runnerArgsForCall, struct {
		arg1 lager.Logger
		arg2 executor.Container
		arg3 <-chan struct{}
	}{arg1, arg2, arg3})
	fake.recordInvocation("Runner", []interface{}{arg1, arg2, arg3})
	fake.runnerMutex.Unlock()
	if fake.RunnerStub != nil {
		return fake.RunnerStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.runnerReturns.result1, fake.runnerReturns.result2
}

func (fake *FakeProxyManager) RunnerCallCount() int {
	fake.runnerMutex.RLock()
	defer fake.runnerMutex.RUnlock()
	return len(fake.runnerArgsForCall)
}

func (fake *FakeProxyManager) RunnerArgsForCall(i int) (lager.Logger, executor.Container, <-chan struct{}) {
	fake.runnerMutex.RLock()
	defer fake.runnerMutex.RUnlock()
	return fake.runnerArgsForCall[i].arg1, fake.runnerArgsForCall[i].arg2, fake.runnerArgsForCall[i].arg3
}

func (fake *FakeProxyManager) RunnerReturns(result1 containerstore.ProxyRunner, result2 error) {
	fake.RunnerStub = nil
	fake.runnerReturns = struct {
		result1 containerstore.ProxyRunner
		result2 error
	}{result1, result2}
}

func (fake *FakeProxyManager) RunnerReturnsOnCall(i int, result1 containerstore.ProxyRunner, result2 error) {
	fake.RunnerStub = nil
	if fake.runnerReturnsOnCall == nil {
		fake.runnerReturnsOnCall = make(map[int]struct {
			result1 containerstore.ProxyRunner
			result2 error
		})
	}
	fake.runnerReturnsOnCall[i] = struct {
		result1 containerstore.ProxyRunner
		result2 error
	}{result1, result2}
}

func (fake *FakeProxyManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runnerMutex.RLock()
	defer fake.runnerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProxyManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ containerstore.ProxyManager = new(FakeProxyManager)
