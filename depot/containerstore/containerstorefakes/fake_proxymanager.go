// Code generated by counterfeiter. DO NOT EDIT.
package containerstorefakes

import (
	"sync"

	"code.cloudfoundry.org/executor"
	"code.cloudfoundry.org/executor/depot/containerstore"
	"code.cloudfoundry.org/lager"
)

type FakeProxyManager struct {
	ProxyPortsStub        func(lager.Logger, *executor.Container) ([]executor.ProxyPortMapping, []uint16)
	proxyPortsMutex       sync.RWMutex
	proxyPortsArgsForCall []struct {
		arg1 lager.Logger
		arg2 *executor.Container
	}
	proxyPortsReturns struct {
		result1 []executor.ProxyPortMapping
		result2 []uint16
	}
	proxyPortsReturnsOnCall map[int]struct {
		result1 []executor.ProxyPortMapping
		result2 []uint16
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProxyManager) ProxyPorts(arg1 lager.Logger, arg2 *executor.Container) ([]executor.ProxyPortMapping, []uint16) {
	fake.proxyPortsMutex.Lock()
	ret, specificReturn := fake.proxyPortsReturnsOnCall[len(fake.proxyPortsArgsForCall)]
	fake.proxyPortsArgsForCall = append(fake.proxyPortsArgsForCall, struct {
		arg1 lager.Logger
		arg2 *executor.Container
	}{arg1, arg2})
	fake.recordInvocation("ProxyPorts", []interface{}{arg1, arg2})
	fake.proxyPortsMutex.Unlock()
	if fake.ProxyPortsStub != nil {
		return fake.ProxyPortsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.proxyPortsReturns.result1, fake.proxyPortsReturns.result2
}

func (fake *FakeProxyManager) ProxyPortsCallCount() int {
	fake.proxyPortsMutex.RLock()
	defer fake.proxyPortsMutex.RUnlock()
	return len(fake.proxyPortsArgsForCall)
}

func (fake *FakeProxyManager) ProxyPortsArgsForCall(i int) (lager.Logger, *executor.Container) {
	fake.proxyPortsMutex.RLock()
	defer fake.proxyPortsMutex.RUnlock()
	return fake.proxyPortsArgsForCall[i].arg1, fake.proxyPortsArgsForCall[i].arg2
}

func (fake *FakeProxyManager) ProxyPortsReturns(result1 []executor.ProxyPortMapping, result2 []uint16) {
	fake.ProxyPortsStub = nil
	fake.proxyPortsReturns = struct {
		result1 []executor.ProxyPortMapping
		result2 []uint16
	}{result1, result2}
}

func (fake *FakeProxyManager) ProxyPortsReturnsOnCall(i int, result1 []executor.ProxyPortMapping, result2 []uint16) {
	fake.ProxyPortsStub = nil
	if fake.proxyPortsReturnsOnCall == nil {
		fake.proxyPortsReturnsOnCall = make(map[int]struct {
			result1 []executor.ProxyPortMapping
			result2 []uint16
		})
	}
	fake.proxyPortsReturnsOnCall[i] = struct {
		result1 []executor.ProxyPortMapping
		result2 []uint16
	}{result1, result2}
}

func (fake *FakeProxyManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.proxyPortsMutex.RLock()
	defer fake.proxyPortsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProxyManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ containerstore.ProxyManager = new(FakeProxyManager)
